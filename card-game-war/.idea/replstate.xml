<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1454635399156">{:repl-history {:ide [], :local [&quot;(def spade-2 [:spade 2])&quot; &quot;spade-2&quot; &quot;(def club-ace [:club :ace])&quot; &quot;(compare-cards spade-2 club-ace)&quot; &quot;(compare-cards spade-2 spade-2)&quot; &quot;(compare-cards [:spade 2] [:spade 3])&quot; &quot;(compare-suits :spade :club)&quot; &quot;(compare-positions 2 3)&quot; &quot;(compare-ranks 2 3)&quot; &quot;(compare-cards [:spade 2] [:club 2])&quot; &quot;(&gt; 1 0)&quot; &quot;(&gt; 0 0)&quot; &quot;(condp [1 2]\n       [1 2] (println \&quot;opa\&quot;))&quot; &quot;(condp [1 2]\n       [1 2] \&quot;opa\&quot;)&quot; &quot;(condp [1 2]\n       [1 3] \&quot;opa 2\&quot;\n       [1 2] \&quot;opa\&quot;)&quot; &quot;(condp [1 2]\n       ([1 3] (:opa))\n       ([1 2] (:opaopa)))&quot; &quot;(condp [1 2]\n       [1 2] :opa)&quot; &quot;(condp [1 2]\n       [1 3] :opa)&quot; &quot;(condp = [1 2]\n       [1 3] :opa)&quot; &quot;(= [1 2] [1 2])&quot; &quot;(= [1 2] [1 3])&quot; &quot;(condp = [1 2]\n  [1 2] :aaaaa\n       [1 3] :opa)&quot; &quot;(condp = [1 3]\n  [1 2] :aaaaa\n       [1 3] :opa)&quot; &quot;(condp = [1 4]\n  [1 2] :aaaaa\n       [1 3] :opa)&quot; &quot;(condp = [1 4]\n  [1 2] :aaaaa\n       [1 3] :opa\n        :none)&quot; &quot;(condp = [1 2]\n  [1 2] :aaaaa\n       [1 3] :opa\n        :none)&quot; &quot;(condp = [1 3]\n  [1 2] :aaaaa\n       [1 3] :opa\n        :none)&quot; &quot;(condp = [1 3]\n  [_ _] :aaaaa\n       [1 3] :opa\n        :none)&quot; &quot;(condp = [1 3]\n  [1 _] :aaaaa\n       [1 3] :opa\n        :none)&quot; &quot;(condp empty? true)&quot; &quot;(condp = true\n  (empty? []) :p1\n  (empty? [1 2 3]) :p2)&quot; &quot;(who-won? [] [1 2 3])&quot; &quot;(who-won? [1 2 3] [])&quot; &quot;(rand)&quot; &quot;(rand int)&quot; &quot;(int rand)&quot; &quot;(rand-int)&quot; &quot;(rand-int 10)&quot; &quot;(drop 0 [1 2 3])&quot; &quot;(drop 2 [1 2 3])&quot; &quot;(drop 1 [1 2 3])&quot; &quot;(first [1 2 3])&quot; &quot;(conj [] 1 2)&quot; &quot;(conj [0] 1 2)&quot; &quot;(conj [0] [1 2])&quot; &quot;(concat [0] [1 2])&quot; &quot;(into [0] [1 2])&quot; &quot;(shuffle [1 2 3])&quot; &quot;(shuffle [1 2 3 4 5 6])&quot; &quot;cards&quot; &quot;(count cards)&quot; &quot;(split-at 2 cards)&quot; &quot;(split-at (/ (count cards) 2) cards)&quot; &quot;(give-cards)&quot; &quot;give-cards&quot; &quot;(apply play-game give-cards)&quot; &quot;apply play-game give-cards&quot; &quot;(loop\n  [acc]\n  (if (&gt; acc 10)\n    acc\n    (recurs (+ acc 1))))&quot; &quot;(loop\n  [acc 0]\n  (if (&gt; acc 10)\n    acc\n    (recurs (+ acc 1))))&quot; &quot;(loop\n  [acc 0]\n  (if (&gt; acc 10)\n    (println acc)\n    (recurs (+ acc 1))))&quot; &quot;(loop [asd]\n  (when asd\n    (recur nil)))&quot; &quot;(loop [asd \&quot;asd\&quot;]\n  (println asd)\n    (if asd\n      (recur nil)))&quot; &quot;(defn til\n  [max]\n  (loop [start max]\n    (if (= start 0)\n      \&quot;acabou\&quot;\n      (recur (- start 1)))))&quot; &quot;(defn til\n  [max]\n  (loop [start max]\n    (println start)\n    (if (= start 0)\n      \&quot;acabou\&quot;\n      (recur (- start 1)))))&quot; &quot;(til 10)&quot; &quot;(println 123)&quot; &quot;(play-game ([[:spade 2]] [[:spade ace]]))&quot; &quot;(play-game ([[:spade 2]] [[:spade :ace]]))&quot; &quot;p-1-cards&quot; &quot;(count [])&quot; &quot;(empty? [])&quot; &quot;(condp = true\n  (empty? []) :player-2\n  (empty? [1 2 30]) :player-1\n  nil)&quot; &quot;(who-won? [] [1])&quot; &quot;(who-won? [1] [])&quot; &quot;(who-won? [1] [1])&quot; &quot;(resolve-hands '([:club 2]) '([:club :ace]))&quot; &quot;(resolve-hands [:club 2] [:club :ace])&quot; &quot;(first [1 2])&quot; &quot;(play-game '([:club 2]) '([:club :ace]))&quot; &quot;(play-game '([:club :ace]) '([:club 2]))&quot; &quot;(play-game '([]) '([:club 1]))&quot; &quot;(rest [1])&quot; &quot;(play-game '([:club 2]) '([:club 1]))&quot; &quot;(play-game p-1-cards p-2-cards)&quot; &quot;(play-game '([:club 1]) '([:club 2]))&quot; &quot;(play-game '([:club 1] [:club :ace]) '([:club 2 :club 3]))&quot;], :remote []}}</component>
</project>